/**
 * Created by coolbong on 2015-06-03.
 */

const RSAKey = require('../dist/rsa');
const assert = require('assert');

exports.rsa = {

    'simple encrypt / decrypt' : () => {
        const n = '8A42FF7F26DFC41345259B01406754591B70843CB2B8893E1DA42DDF7C63A3E3B704AC8CA0042C093E10E0BF219357E8D6C02539ADF669FCFC1A666FB13D771F9D602583EB40C1997AF02E74C4DA38E09C44FE90D7620CE75F01055AF3C928E7D7EAA5C8FD64421217EA6EF9BA694CBB193725120DFF599ECB964C01C4E82925';
        const e = '010001';
        const d = '5C5C0316EA5E023A292FC4CAE23DE44F9E0FDC963B812054F9320A5EC7563C4DCA9D79B27AD62EA081F07E61CF4901298E034F1AA7C5FAE93F735748776AAADED4CD05FEBBD256E4CB8DD6866FA753D7747690EFC7EC8259220926446DF3529EB62A8DEF8D0503C255371BCC12DA7B49D958E96BACDDACCD332939AA609D72A1';
        const p = 'F3B68FF28A335EC18793A1D04700D9552B89E1A8C77F60D8BFD9D01A5FBE3FF077E050174B820667DA5C01B3636F23A4AFCB9EFEC4863F29EDA67D0D5B47F97D';
        const q = '913B7260F4E3C250D59F7DE0392A46ED8204228323D46A0755597BC6B54B1266E0A65EC7D57DF4661ADC38FDA0A2B423F1F63624473FBAA6A43B09C7102D3EC9';
        const dP = '82527C7520EBC95EC9C5EB4079C77D702AE107577E9EA1C626092E5BFC18BB0E36BC2F77D57BC93B1DAC1788BAC242981D1D507F41CDDBD6EAEB1D71D7FF0BED';
        const dQ = '14D9C50D187B8E8D4E6E2C834191C947161083E7F1FFF00D077AE6635BE9E04576E14BE042CD6786353B02CF9EFD5D01801E8A1D61414C09DAB043321A2774C9';
        const qInv = '360D37F2799E2706D65145FCFB4C6CF876F9392AD738E05E61D71E5161DD1F21ECA791FA56FAD0D16E4962354406858DC77B9C20C115AE33F2F37E4F5B60A061';

        const input = 'test';

        const publicKey = new RSAKey();
        publicKey.setPublic(n, e);
        const cryptedText = publicKey.encrypt(input);

        const privateKey = new RSAKey();
        privateKey.setPrivate(n, e, d);
        assert.strictEqual(privateKey.decrypt(cryptedText), input);

        const privateKeyEx = new RSAKey();
        privateKeyEx.setPrivateEx(n, e, d, p, q, dP, dQ, qInv);
        assert.strictEqual(privateKeyEx.decrypt(cryptedText), input);
    },
};
